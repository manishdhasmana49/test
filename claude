import pandas as pd
import numpy as np

# Load the exposure data and GFK postcodes
exposure_df = pd.read_csv('exposure_data.csv')  # Replace with your actual filename
gfk_postcodes_df = pd.read_csv('gfk_postcodes.csv')  # Replace with your actual filename

# Assuming the zipcode column is named 'zipcode' in both dataframes
# First, check which zipcodes from exposure data are not in GFK postcodes
missing_zipcodes = exposure_df[~exposure_df['zipcode'].isin(gfk_postcodes_df['zipcode'])]

# Function to find the closest matching postcode
def find_closest_postcode(zipcode, gfk_df, lat, lon):
    # Filter GFK postcodes to those with similar first few digits
    similar_postcodes = gfk_df[gfk_df['zipcode'].str.startswith(str(zipcode)[:2])]
    
    if len(similar_postcodes) > 0:
        # Calculate distance using Haversine formula or simple Euclidean distance
        similar_postcodes['distance'] = np.sqrt(
            (similar_postcodes['lat'] - lat)**2 + 
            (similar_postcodes['lon'] - lon)**2
        )
        
        # Return the closest postcode
        return similar_postcodes.loc[similar_postcodes['distance'].idxmin(), 'zipcode']
    
    return np.nan

# Assign closest GFK postcodes to missing zipcodes
exposure_df['gfk_postcode'] = exposure_df.apply(
    lambda row: row['zipcode'] if row['zipcode'] in gfk_postcodes_df['zipcode'].values 
    else find_closest_postcode(row['zipcode'], gfk_postcodes_df, row['lat'], row['lon']), 
    axis=1
)

# Summarize the results
print("Total zipcodes in exposure data:", len(exposure_df))
print("Zipcodes not found in GFK:", len(missing_zipcodes))
print("Zipcodes successfully matched:", len(exposure_df) - len(missing_zipcodes))

# Optional: Save the updated dataframe
exposure_df.to_csv('exposure_data_with_gfk_postcodes.csv', index=False)
